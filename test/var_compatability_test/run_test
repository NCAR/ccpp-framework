#! /bin/bash

currdir="`pwd -P`"
scriptdir="$( cd $( dirname $0 ); pwd -P )"

##
## Option default values
##
defdir="ct_build"
build_dir="${currdir}/${defdir}"
cleanup="PASS" # Other supported options are ALWAYS and NEVER
verbosity=0

##
## General syntax help function
## Usage: help <exit status>
##
help () {
  local hname="Usage: `basename ${0}`"
  local hprefix="`echo ${hname} | tr '[!-~]' ' '`"
  echo "${hname} [ --build-dir <dir name> ] [ --cleanup <opt> ]"
  echo "${hprefix} [ --verbosity <#> ]"
  hprefix="    "
  echo ""
  echo "${hprefix} <dir name>: Directory for building and running the test"
  echo "${hprefix}             default is <current directory>/${defdir}"
  echo "${hprefix} <opt>: Cleanup option is ALWAYS, NEVER, or PASS"
  echo "${hprefix}        default is PASS"
  echo "${hprefix} verbosity: 0, 1, or 2"
  echo "${hprefix}            default is 0"
  exit $1
}

##
## Error output function (should be handed a string)
##
perr() {
  >&2 echo -e "\nERROR: ${@}\n"
  exit 1
}

##
## Cleanup the build and test directory
##
docleanup() {
  # We start off in the build directory
  if [ "${build_dir}" == "${currdir}" ]; then
    echo "WARNING: Cannot clean ${build_dir}"
  else
    cd ${currdir}
    rm -rf ${build_dir}
  fi
}

## Process our input arguments
while [ $# -gt 0 ]; do
  case $1 in
    --h | -h | --help | -help)
      help 0
      ;;
    --build-dir)
      if [ $# -lt 2 ]; then
        perr "${1} requires a build directory"
      fi
      build_dir="${2}"
      shift
      ;;
    --cleanup)
      if [ $# -lt 2 ]; then
        perr "${1} requies a cleanup option (ALWAYS, NEVER, PASS)"
      fi
      if [ "${2}" == "ALWAYS" -o "${2}" == "NEVER" -o "${2}" == "PASS" ]; then
        cleanup="${2}"
      else
        perr "Allowed cleanup options: ALWAYS, NEVER, PASS"
      fi
      shift
      ;;
    --verbosity)
      if [ $# -lt 2 ]; then
        perr "${1} requires a verbosity value (0, 1, or 2)"
      fi
      if [ "${2}" == "0" -o "${2}" == "1" -o "${2}" == "2" ]; then
        verbosity=$2
      else
        perr "allowed verbosity levels are 0, 1, 2"
      fi
      shift
      ;;
    *)
      perr "Unrecognized option, \"${1}\""
      ;;
  esac
  shift
done

# Create the build directory, if necessary
if [ -d "${build_dir}" ]; then
  # Always make sure build_dir is not in the test dir
  if [ "$( cd ${build_dir}; pwd -P )" == "${currdir}" ]; then
    build_dir="${build_dir}/${defdir}"
  fi
else
  mkdir -p ${build_dir}
  res=$?
  if [ $res -ne 0 ]; then
    perr "Unable to create build directory, '${build_dir}'"
  fi
fi
build_dir="$( cd ${build_dir}; pwd -P )"

## framework is the CCPP Framework root dir
framework="$( cd $( dirname $( dirname ${scriptdir} ) ); pwd -P )"
frame_src="${framework}/src"

##
## check strings for datafile command-list test
## NB: This has to be after build_dir is finalized
##
host_files="${build_dir}/ccpp/test_host_ccpp_cap.F90"
suite_files="${build_dir}/ccpp/ccpp_var_compatability_suite_cap.F90"
utility_files="${build_dir}/ccpp/ccpp_kinds.F90"
utility_files="${utility_files},${frame_src}/ccpp_constituent_prop_mod.F90"
utility_files="${utility_files},${frame_src}/ccpp_hashable.F90"
utility_files="${utility_files},${frame_src}/ccpp_hash_table.F90"
ccpp_files="${utility_files}"
ccpp_files="${ccpp_files},${build_dir}/ccpp/test_host_ccpp_cap.F90"
ccpp_files="${ccpp_files},${build_dir}/ccpp/ccpp_var_compatability_suite_cap.F90"
#process_list=""
module_list="effr_calc"
#dependencies=""
suite_list="var_compatability_suite"
required_vars_var_compatability="ccpp_error_code,ccpp_error_message"
required_vars_var_compatability="${required_vars_var_compatability},effective_radius_of_stratiform_cloud_ice_particle"
required_vars_var_compatability="${required_vars_var_compatability},effective_radius_of_stratiform_cloud_liquid_water_particle"
required_vars_var_compatability="${required_vars_var_compatability},effective_radius_of_stratiform_cloud_rain_particle"
required_vars_var_compatability="${required_vars_var_compatability},effective_radius_of_stratiform_cloud_snow_particle"
required_vars_var_compatability="${required_vars_var_compatability},horizontal_loop_begin"
required_vars_var_compatability="${required_vars_var_compatability},horizontal_loop_end"
required_vars_var_compatability="${required_vars_var_compatability},vertical_layer_dimension"
input_vars_var_compatability="effective_radius_of_stratiform_cloud_liquid_water_particle"
input_vars_var_compatability="${input_vars_var_compatability},effective_radius_of_stratiform_cloud_rain_particle"
input_vars_var_compatability="${input_vars_var_compatability},effective_radius_of_stratiform_cloud_snow_particle"
input_vars_var_compatability="${input_vars_var_compatability},horizontal_loop_begin"
input_vars_var_compatability="${input_vars_var_compatability},horizontal_loop_end"
input_vars_var_compatability="${input_vars_var_compatability},vertical_layer_dimension"
output_vars_var_compatability="ccpp_error_code,ccpp_error_message"
output_vars_var_compatability="${output_vars_var_compatability},effective_radius_of_stratiform_cloud_ice_particle"
output_vars_var_compatability="${output_vars_var_compatability},effective_radius_of_stratiform_cloud_liquid_water_particle"
output_vars_var_compatability="${output_vars_var_compatability},effective_radius_of_stratiform_cloud_snow_particle"

##
## Run a database report and check the return string
## $1 is the report program file
## $2 is the database file
## $3 is the report string
## $4 is the check string
## $5+ are any optional arguments
##
check_datatable() {
  local checkstr=${4}
  local teststr
  local prog=${1}
  local database=${2}
  local report=${3}
  shift 4
  echo "Checking ${report} report"
  teststr="`${prog} ${database} ${report} $@`"
  if [ "${teststr}" != "${checkstr}" ]; then
    perr "datatable check:\nExpected: '${checkstr}'\nGot: '${teststr}'"
  fi
}

# cd to the build directory
cd ${build_dir}
res=$?
if [ $res -ne 0 ]; then
  perr "Unable to cd to build directory, '${build_dir}'"
fi
# Clean build directory
rm -rf *
res=$?
if [ $res -ne 0 ]; then
  perr "Unable to clean build directory, '${build_dir}'"
fi
# Run CMake
opts=""
if [ $verbosity -gt 0 ]; then
  opts="${opts} -DVERBOSITY=${verbosity}"
fi
# Run cmake
cmake ${scriptdir} ${opts}
res=$?
if [ $res -ne 0 ]; then
  perr "CMake failed with exit code, ${res}"
fi
# Test the datafile user interface
report_prog="${framework}/scripts/ccpp_datafile.py"
datafile="${build_dir}/ccpp/datatable.xml"
echo "Running python interface tests"
python3 ${scriptdir}/test_reports.py ${build_dir} ${datafile}
res=$?
if [ $res -ne 0 ]; then
  perr "python interface tests failed"
fi
echo "Running command line tests"
echo "Checking required files from command line:"
check_datatable ${report_prog} ${datafile} "--host-files" ${host_files}
check_datatable ${report_prog} ${datafile} "--suite-files" ${suite_files}
check_datatable ${report_prog} ${datafile} "--utility-files" ${utility_files}
check_datatable ${report_prog} ${datafile} "--ccpp-files" ${ccpp_files}
echo -e "\nChecking lists from command line"
#check_datatable ${report_prog} ${datafile} "--process-list" ${process_list}
check_datatable ${report_prog} ${datafile} "--module-list" ${module_list}
#check_datatable ${report_prog} ${datafile} "--dependencies" ${dependencies}
check_datatable ${report_prog} ${datafile} "--suite-list" ${suite_list}       \
                --sep ";"
echo -e "\nChecking variables for var_compatability suite from command line"
check_datatable ${report_prog} ${datafile} "--required-variables"             \
                ${required_vars_var_compatability} "var_compatability_suite"
check_datatable ${report_prog} ${datafile} "--input-variables"                \
                ${input_vars_var_compatability} "var_compatability_suite"
check_datatable ${report_prog} ${datafile} "--output-variables"               \
                ${output_vars_var_compatability} "var_compatability_suite"
# Run make
make
res=$?
if [ $res -ne 0 ]; then
  perr "make failed with exit code, ${res}"
fi
# Run test
./test_host
res=$?
if [ $res -ne 0 ]; then
  perr "test_host failed with exit code, ${res}"
fi

if [ "${cleanup}" == "ALWAYS" ]; then
  docleanup
elif [ $res -eq 0 -a "${cleanup}" == "PASS" ]; then
  docleanup
fi

exit $res
